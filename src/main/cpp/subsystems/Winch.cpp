// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "subsystems/Winch.h"
#include <frc/smartdashboard/SmartDashboard.h>

Winch::Winch(){
    SetName("Winch");
    SetSubsystem("Winch");

    AddChild("Potentiometer", &m_potentiometer);
    AddChild("Servo",         &m_winchServo);
    AddChild("WinchMotor",    &m_winchMotor);

    m_winchMotor.SetInverted(false);
}

void Winch::Periodic() {
    // Put code here to be run every loop
}

void Winch::SimulationPeriodic() {
}

// Put methods for controlling this subsystem
// here. Call these from Commands.
void Winch::Raise(){
    wpi::outs() << "Going Up.\n";
    m_winchMotor.Set(0.5);
    wpi::outs() << "Activate Actuator.\n";
    m_winchServo.SetAngle(50);
}

void Winch::Lower(){
    m_winchTimer.Reset();
    m_winchTimer.Start();
    while (m_winchTimer.Get() <= 1.0)
    {
        // raise winch
        wpi::outs() << "In Timer.  Raise winch slightly while adjusting actuator.\n";
        m_winchMotor.Set(0.5);
        // move actuator
        m_winchServo.SetAngle(50);
    }

    // stop timer
    m_winchTimer.Stop();
    // lower winch
    wpi::outs() << "Outside of Timer.  Lower winch.\n";
    m_winchMotor.Set(-0.5);
}

void Winch::WinchStop(){
    wpi::outs() << "WinchStop.\n";
    m_winchMotor.Set(0.0);
    wpi::outs() << "Activate Actuator.\n";
    m_winchServo.SetAngle(100);
}